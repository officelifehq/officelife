name: Docker image

on:
  schedule:
    - cron:  '0 0 * * *'

env:
  php-version: '8.0'
  node-version: 16


jobs:
  package:
    runs-on: ubuntu-latest

    outputs:
      package: ${{ steps.package.outputs.package }}

    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Setup PHP ${{ env.php-version }}
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.php-version }}
          coverage: none

    # Composer
      - name: Get Composer Cache Directory
        id: composer-cache
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"
      - name: Cache composer files
        uses: actions/cache@v2.1.6
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ env.php-version }}-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-${{ env.php-version }}-${{ hashFiles('**/composer.lock') }}
            ${{ runner.os }}-composer-${{ env.php-version }}
            ${{ runner.os }}-composer-

    # Yarn
      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: ${{ env.node-version }}
      - name: Get yarn cache directory path
        id: yarn-cache
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - name: Cache yarn files
        uses: actions/cache@v2.1.6
        with:
          path: ${{ steps.yarn-cache.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
            ${{ runner.os }}-yarn-

      - name: Create package
        id: package
        run: scripts/package.sh 'main'

      - name: Store package
        uses: actions/upload-artifact@v2
        with:
          name: package
          path: ${{ steps.package.outputs.package }}

  docker:
    runs-on: ubuntu-latest
    needs: package
    strategy:
      matrix:
        variant: [apache, fpm, fpm-alpine]

    steps:
      - name: Checkout sources
        uses: actions/checkout@v2
        with:
          repository: officelifehq/docker
          submodules: true

      - name: Download package
        uses: actions/download-artifact@v2
        with:
          name: package
          path: package

      - name: Copy package
        run: cp package/${{ needs.package.outputs.package }} main/${{ matrix.variant }}/officelife-main.tar.bz2

      - name: Add commit number
        run: sed -i 's/\(org\.opencontainers\.image\.revision="\)/\1${{ github.sha }}/' main/${{ matrix.variant }}/Dockerfile

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to GitHub container registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ secrets.CR_USER }}
          password: ${{ secrets.CR_PAT }}

      - name: Docker build
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          push: ${{ github.ref == 'refs/heads/main' }}
          tags: ghcr.io/officelifehq/officelife-dev:main-${{ matrix.variant }}
          context: main/${{ matrix.variant }}
          file: main/${{ matrix.variant }}/Dockerfile

      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}
